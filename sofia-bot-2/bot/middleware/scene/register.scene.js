const { Markup, Scenes, Composer } = require('telegraf')
// https://highload.today/regulyarnye-vyrazheniya-v-javascript-primery-ispolzovaniya-i-servisy-dlya-proverki/

// –®–∞–≥ 1 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?)
const nameStep = new Composer()
nameStep.action('/yes', async (ctx) => {
   ctx.wizard.state.formData = {}
   await ctx.reply('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:')
   return ctx.wizard.next()
})
nameStep.action('/no', async (ctx) => {
   await ctx.answerCbQuery()
   await ctx.deleteMessage()
   return ctx.scene.leave()
})

// –®–∞–≥ 2 (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∞-—è, a-z)
const emailStep = new Composer()
emailStep.on('text', async (ctx) => {
   let msg = ctx.message.text

   if (/^[–∞-—è –ê-–Øa-zA-Z]+$/.test(msg)) {
      msg = msg[0].toUpperCase() + msg.slice(1)
      ctx.wizard.state.formData.firstName = msg
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ e-mail –∞–¥—Ä–µ—Å:')
      return ctx.wizard.next()
   } else {
      await ctx.replyWithHTML(
         'ü¶û <b>–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª!</b>\n\n–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:'
      )
   }

   return false
})

// –®–∞–≥ 3 (–ø—Ä–æ–≤–µ—Ä–∫–∞ e-mail)
const phoneStep = new Composer()
phoneStep.on('text', async (ctx) => {
   const msg = ctx.message.text
   const reg = /[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}/gim.test(msg)

   if (reg) {
      ctx.wizard.state.formData.email = msg
      await ctx.reply('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7(905)022-40-00')
      return ctx.wizard.next()
   } else {
      await ctx.replyWithHTML('ü¶û <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail!</b>')
   }

   return false
})

// –®–∞–≥ 4 (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
const phoneStep2 = new Composer()
phoneStep2.on('text', async (ctx) => {
   const msg = ctx.message.text
   const reg =
      /^\+?\d{1,3}?[- .]?\(?(?:\d{2,3})\)?[- .]?\d\d\d[- .]?\d\d[- ]\d\d$/.test(
         msg
      )
   if (reg) {
      ctx.wizard.state.formData.phone = msg
      await ctx.reply('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏\n(–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):', {
         reply_markup: JSON.stringify({
            inline_keyboard: [
               [{ text: '‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: '/skip' }],
            ],
         }),
      })
      return ctx.wizard.next()
   } else {
      await ctx.replyWithHTML(
         'ü¶û <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7(905)022-40-00!</b>'
      )
   }

   return false
})

// –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–¥—É—Ç —Å—Ü–µ–Ω—ã
const registerScene = new Scenes.WizardScene(
   'registerWizard',
   nameStep,
   emailStep,
   phoneStep,
   phoneStep2
)

module.exports = registerScene
