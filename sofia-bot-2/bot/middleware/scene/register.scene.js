const { Markup, Scenes, Composer } = require('telegraf')
// https://highload.today/regulyarnye-vyrazheniya-v-javascript-primery-ispolzovaniya-i-servisy-dlya-proverki/

// –®–∞–≥ 1 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?)
const nameStep = new Composer()
nameStep.action('/yes', async (ctx) => {
   ctx.wizard.state.formData = {}
   await ctx.reply('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:')
   return ctx.wizard.next()
})
nameStep.action('/no', async (ctx) => {
   await ctx.answerCbQuery()
   await ctx.deleteMessage()
   return ctx.scene.leave()
})

// –®–∞–≥ 2 (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∞-—è, a-z)
const emailStep = new Composer()
emailStep.on('text', async (ctx) => {
   let msg = ctx.message.text

   if (/^[–∞-—è –ê-–Øa-zA-Z]+$/.test(msg)) {
      msg = msg[0].toUpperCase() + msg.slice(1)
      ctx.wizard.state.formData.firstName = msg
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ e-mail –∞–¥—Ä–µ—Å:')
      return ctx.wizard.next()
   } else {
      await ctx.replyWithHTML(
         'ü¶û <b>–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª!</b>\n\n–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:'
      )
   }

   return false
})

// –®–∞–≥ 3 (–ø—Ä–æ–≤–µ—Ä–∫–∞ e-mail)
const phoneStep = new Composer()
phoneStep.on('text', async (ctx) => {
   const msg = ctx.message.text
   const reg = /[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}/gim.test(msg)

   if (reg) {
      ctx.wizard.state.formData.email = msg.toLowerCase()
      await ctx.reply('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7(905)022-40-00')
      return ctx.wizard.next()
   } else {
      await ctx.replyWithHTML('ü¶û <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail!</b>')
   }

   return false
})

// –®–∞–≥ 4 (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
const phone2Step = new Composer()
phone2Step.on('text', async (ctx) => {
   const msg = ctx.message.text
   const reg =
      /^\+?\d{1,3}?[- .]?\(?(?:\d{2,3})\)?[- .]?\d\d\d[- .]?\d\d[- ]\d\d$/.test(
         msg
      )
   if (reg) {
      ctx.wizard.state.formData.phone = msg
      await ctx.reply('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏\n(–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):', {
         reply_markup: JSON.stringify({
            inline_keyboard: [
               [{ text: '‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: '/skip' }],
            ],
         }),
      })
      return ctx.wizard.next()
   } else {
      await ctx.replyWithHTML(
         'ü¶û <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7(905)022-40-00!</b>'
      )
   }

   return false
})

// –®–∞–≥ 5 (–ø—Ä–æ–≤–µ—Ä–∫–∞ 2 –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
const howFindStep = new Composer()
const txt = '–ö–∞–∫ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏ (–Ω-—Ä: —Ä–µ–∫–ª–∞–º–∞ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º)?'

howFindStep.action('/skip', async (ctx) => {
   await ctx.answerCbQuery()
   ctx.wizard.state.formData.phone2 = ''
   await ctx.reply(txt)
   return ctx.wizard.next()
})
howFindStep.on('text', async (ctx) => {
   const msg = ctx.message.text
   const reg =
      /^\+?\d{1,3}?[- .]?\(?(?:\d{2,3})\)?[- .]?\d\d\d[- .]?\d\d[- ]\d\d$/.test(
         msg
      )
   if (reg === true) {
      ctx.wizard.state.formData.phone2 = msg
      await ctx.reply(txt)
      return ctx.wizard.next()
   } else {
      await ctx.replyWithHTML(
         'ü¶û <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7(905)022-40-00!</b>',
         {
            reply_markup: JSON.stringify({
               inline_keyboard: [
                  [{ text: '‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: '/skip' }],
               ],
            }),
         }
      )
   }

   return false
})

// –®–∞–≥ 6 (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏)
const isCorrectStep = new Composer()

isCorrectStep.on('text', async (ctx) => {
   const userData = ctx.wizard.state.formData
   const msg = ctx.message.text
   if (msg.length > 6 && /^[–∞-—è –ê-–Øa-zA-Z0-9]+$/.test(msg)) {
      userData.howFind = msg
      userData.userID = ctx.chat.id //user id
      userData.nickName = ctx.chat.username ? ctx.chat.username : '' //@
      await ctx.replyWithHTML('<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>')
      await ctx.replyWithHTML(
         `
         <b>–í–∞—à–µ –∏–º—è:</b>\n${userData.firstName}\n\n<b>–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:</b>\n${
            userData.email
         }\n\n<b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π):</b>\n${userData.phone}\n${
            userData.phone2
               ? '<b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π):</b>\n' +
                 userData.phone2 +
                 '\n\n'
               : ''
         }\n${
            userData.nickName
               ? '<b>–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:</b>\n' + 't.me/' + userData.nickName + '\n'
               : ''
         }\n<b>–ö–∞–∫ –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏:</b>\n${userData.howFind}`,
         {
            disable_web_page_preview: true,
            reply_markup: JSON.stringify({
               inline_keyboard: [
                  [
                     { text: '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ', callback_data: '/yes' },
                     { text: '‚ùå –ù–µ—Ç, –Ω–µ –≤–µ—Ä–Ω–æ', callback_data: '/no' },
                  ],
               ],
            }),
         }
      )
      return ctx.wizard.next()
   } else {
      await ctx.replyWithHTML(
         'ü¶û <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏</b>'
      )
   }

   return false
})

// –®–∞–≥ 7 (–∏—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
const saveBDStep = new Composer()
saveBDStep.action('/no', async (ctx) => {
   await ctx.answerCbQuery()
   await ctx.reply(
      '–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–∞–≤ /start'
   )
   return ctx.scene.leave()
})
// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î users
saveBDStep.action('/yes', async (ctx) => {
   await ctx.answerCbQuery()
   await ctx.replyWithSticker(
      'https://tlgrm.ru/_/stickers/8c8/aa0/8c8aa0c1-8da1-3a11-ae45-fc092dd0c263/16.webp'
   )
   await ctx.replyWithHTML(
      `<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é ${ctx.wizard.state.formData.firstName}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!</b>\n\n–¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞–∫–∞–∑—ã...). –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ!\n\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start`
   )
   return ctx.scene.leave()
})

// –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–¥—É—Ç —Å—Ü–µ–Ω—ã
const registerScene = new Scenes.WizardScene(
   'registerWizard',
   nameStep,
   emailStep,
   phoneStep,
   phone2Step,
   howFindStep,
   isCorrectStep,
   saveBDStep
)

module.exports = registerScene
